generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext(schema: "extensions"), pg_trgm, postgis(schema: "extensions"), uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id            String           @id @default(dbgenerated("public.uuid_generate_v7()")) @db.Uuid
  email         String           @unique @db.VarChar(255)
  name          String
  password      String?
  role          String           @default("seeker")
  status        String           @default("active")
  image         String?
  dob           DateTime?        @db.Date
  address       String?
  emailVerified DateTime?        @map("email_verified")
  accounts      Account[]
  cvs           Cv[]
  applications  JobApplication[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  email      String

  @@unique([email, token])
  @@map("verification_tokens")
}

model ResetPasswordToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
  @@map("reset_password_tokens")
}

model Industry {
  industry_id   String @id @db.VarChar(3)
  industry_name String
  jobs          Job[]

  @@map("industries")
}

model JobFunction {
  job_function_id   String           @id @db.VarChar(3)
  job_function_name String
  subfunctions      JobSubfunction[]
  jobs              Job[]

  @@map("job_functions")
}

model JobSubfunction {
  job_subfunction_id   String      @db.VarChar(3)
  job_subfunction_name String
  job_function_id      String
  job_function         JobFunction @relation(fields: [job_function_id], references: [job_function_id])
  jobs                 Job[]

  @@id([job_function_id, job_subfunction_id])
  @@map("job_subfunctions")
}

model Job {
  job_id             String           @id @db.VarChar(11)
  job_title          String
  description        String
  salary_range_start Float
  salary_range_end   Float
  close_date         DateTime         @db.Date
  industry_id        String           @db.VarChar(3)
  job_function_id    String           @db.VarChar(3)
  job_subfunction_id String           @db.VarChar(3)
  location           String
  status             String           @default("active")
  employment_type    String
  created_date       DateTime         @db.Date
  applications       JobApplication[]
  industry           Industry         @relation(fields: [industry_id], references: [industry_id])
  job_function       JobFunction      @relation(fields: [job_function_id], references: [job_function_id])
  subfunction        JobSubfunction   @relation(fields: [job_function_id, job_subfunction_id], references: [job_function_id, job_subfunction_id])

  @@map("jobs")
}

model Cv {
  cv_id         String           @id @default(dbgenerated("public.uuid_generate_v7()")) @db.Uuid
  user_id       String           @db.Uuid
  cv_url        String
  uploaded_time DateTime         @default(now()) @db.Timestamp(6)
  cv_title      String?
  status        String?          @default("active")
  user          User             @relation(fields: [user_id], references: [id])
  applications  JobApplication[]

  @@map("cvs")
}

model JobApplication {
  application_id String   @id @default(dbgenerated("public.uuid_generate_v7()")) @db.Uuid
  job_id         String   @db.VarChar(11)
  user_id        String   @db.Uuid
  cv_id          String   @db.Uuid
  applied_time   DateTime @default(now()) @db.Timestamp(6)
  status         String   @default("pending")
  cv             Cv       @relation(fields: [cv_id], references: [cv_id])
  job            Job      @relation(fields: [job_id], references: [job_id])
  user           User     @relation(fields: [user_id], references: [id])

  @@map("job_applications")
}

/// This table has subclasses and requires additional setup for migrations. Visit https://pris.ly/d/table-inheritance for more info.
model tenants {
  id         String    @id @default(dbgenerated("public.uuid_generate_v7()")) @db.Uuid
  name       String?
  created    DateTime  @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamp(6)
  updated    DateTime  @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamp(6)
  deleted    DateTime? @db.Timestamp(6)
  compute_id String?   @db.Uuid
}
